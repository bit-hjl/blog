(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{543:function(f,t,s){"use strict";s.r(t);var e=s(4),a=Object(e.a)({},(function(){var f=this,t=f.$createElement,s=f._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":f.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[f._v("介绍")]),f._v(" "),s("p",[f._v("C++中最大值的表示方法"),s("br")])]),f._v(" "),s("h2",{attrs:{id:"一、概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、概述"}},[f._v("#")]),f._v(" 一、概述")]),f._v(" "),s("h5",{attrs:{id:"第一种-0x7fffffff"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第一种-0x7fffffff"}},[f._v("#")]),f._v(" 第一种，0x7fffffff")]),f._v(" "),s("p",[f._v("这个值代表的是int的最大值，也就是2147483647（2x10^9），这种一般用于不对最大值进行操作的 情况，否则对于int型变量，其操作0x7fffffff + 一个正数将会导致溢出")]),f._v(" "),s("h5",{attrs:{id:"第二种-0x3f3f3f3f"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第二种-0x3f3f3f3f"}},[f._v("#")]),f._v(" 第二种，0x3f3f3f3f")]),f._v(" "),s("p",[f._v("这个值的大小是1061109567（1e9），它的好处是可以进行一定的求和操作而不会溢出，同时也可以保证在正常题目的要求下（数值一般小于1e9）作为无穷大正常使用。除此之外，它还可以用于数组重新赋值的情况。如果我们想要将某个数组清零，我们通常会使用memset(a,0,sizeof(a))，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为memset是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要memset(a,0x3f,sizeof(a))。")]),f._v(" "),s("Vssue")],1)}),[],!1,null,null,null);t.default=a.exports}}]);